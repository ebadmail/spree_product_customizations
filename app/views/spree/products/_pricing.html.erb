<%= content_for :head do %>
  <%# didn't use javascript_tag here so we don't confuse deface %>
  <script type="text/javascript">
    //<![CDATA[
    // First I need to set up a mapping for the variants on the screen so I can easily grab their prices

    var variant_price_map = {};

    <% if @product.has_variants? %>
      <% @product.variants.active.each_with_index do |v, index| %>
        variant_price_map[<%= v.id %>] = <%= v.price %>;
      <% end %>
    <% end %>

    // we start off the page with a known base price, a known set of
    // possible configurations (ad_hoc_option_values), and no customizations

    // 'updatePrice()' takes the base price + current 'configuration' adjustments + 'customization' adjustments

    var base_price = <%= @product.price %>;

    var delay = (function() {
      var timer = 0;
      return function(callback, ms){
        clearTimeout (timer);
        timer = setTimeout(callback, ms);
      };
    })();

    $(function() {
      // watch for variant changes
      $("#product-variants input[type='radio']").change(function() {
        updatePrice();
      });

      updatePrice(); // set the initial price
    });

    // http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric
    function isNumeric(input) {
      return (input - 0) == input && input.length > 0;
    }

    function compute_variant_price_diff(base_price) {
      var variant_price = 0;

      $("#product-variants input[type='radio']:checked").each (function() {
        variant_price=variant_price_map[$(this).val()];
      });

      <% if @product.has_variants? %>
        return variant_price-base_price;
      <% else %>
        return variant_price;  // don't return a negative number if we don't have any variants
      <% end %>
    }

    function compute_customization_price() {
      var price = 0;

      // for selects or checkboxes
      $(".customization_price").each(function() {
        var val = $(this).val();

        if (isNumeric(val)) {
          price += parseFloat(val);
        }
      });

      return price;
    }

    function replaceKeepingCurrency(oldText, newText) {
      return oldText.replace(oldText.match(/(\d|\.|,|'| )*/g)[1], newText);
    }

    function updatePrice() {
      var cur_variant_price_diff = compute_variant_price_diff(base_price);
      var cur_customization_price =  compute_customization_price();
      var cur_price = base_price + cur_variant_price_diff + cur_customization_price;

      $(".price.selling").text(
        replaceKeepingCurrency(
          $(".price.selling").text().trim(), cur_price.toFixed(2)
        )
      );
    }
    //]]>
  </script>
<% end %>
